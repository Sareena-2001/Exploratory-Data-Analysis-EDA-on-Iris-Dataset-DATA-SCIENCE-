# -*- coding: utf-8 -*-
"""TASK1: IRIS DATASET

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14_yFR4693SUMzpLcyOoe2sUCkFXf7wO3
"""

#EXPLORATORY DATA ANALYSIS USING IRIS DATASET

#DATASET IS DOWNLOADED FROM KAGGLE

#LIBRARIES

import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd


# Dataset path

myirisdataset_path = pd.read_csv('/content/sample_data/IRIS.csv')

myirisdataset_path.head(8)

myirisdataset_path.tail(5)

myirisdataset_path.info()

myirisdataset_path.describe()

#CHECK FOR MISSING VALUES

print("MISSING VALUES IN THE IRIS DATASET=", myirisdataset_path.isnull().sum())

#SIMPLY DROP THE DUPLICATE VALUES


myiris_dataset = myirisdataset_path.drop_duplicates()
print("The number of duplicate values left after applying the drop duplicate technique:",myiris_dataset .duplicated().sum())

#BOX PLOT (BOX AND WHISKER PLOT) FOR EXPLORATORY DATA ANALYSIS (EDA)

plt.figure(figsize=(15, 5))
sns.boxplot(data=myirisdataset_path,color='purple')
plt.title('Boxplot for EDA using Iris Dataset')
plt.show()

#HISTOGRAM FOR EDA

myirisdataset_path.hist(figsize=(19, 8),color='lemonchiffon')
plt.suptitle('Histogram Representation',color='green')
plt.show()

#SCATTER PLOT

sns.pairplot(myirisdataset_path, hue='species')
plt.suptitle('Representation of Iris Features Using Scatter Plot', y=1.06)
plt.show()

#VIOLIN PLOT

plt.subplot(1, 2, 2)
sns.violinplot(data=myirisdataset_path, color='green')
plt.title('Representation of Iris Dataset using Violin Plot')

plt.xticks(rotation=60)
plt.tight_layout()
plt.show()

#LABEL ENCODING

Label_encoding = {'Iris-setosa': 0, 'Iris-versicolor': 1, 'Iris-virginica': 2}
myirisdataset_path['Encoded_Species'] = myirisdataset_path['species'].map(Label_encoding)

# Drop non-numeric columns and the original species column
Col_num = myirisdataset_path.drop(columns=['species', 'Encoded_Species'])




# Representation using Correlated Heatmap

plt.figure(figsize=(10, 8))
sns.heatmap(Col_num.corr(), annot=True, cmap='plasma')
plt.title('Correlation Heatmap Representing Iris Features')
plt.show()

#SHOWING CLASS DISTRIBUTION

plt.figure(figsize=(12, 8))
sns.countplot(x='species', data=myirisdataset_path,color='gray')
plt.title('Representation of class distribution for iris species')
plt.show()

#DISPLAYING CLASS DISTRIBUTION

CLASS_DIST = myirisdataset_path['species'].value_counts()

# Print the class distribution
print("CLASS REPRESENTATION FOR SPECIES OF IRIS FLOWER")
print(CLASS_DIST)